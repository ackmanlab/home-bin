#!/bin/bash
if [ "$1" == "-h" ] ; then
    echo "
    sbib - search for citekey in a bibtex.bib or bibjson.json file, preview pdf, or return a bibliography entry in markdown or other format

         usage:
          sbib
          # use 'a' flag to search all 
          sbib a
          # use 'j' flag for bibjson quick search and preview
          sbib j
          # pass a custom citation style and database
          sbib a citeprocStyle.csl bibdFile.json

          Then press <enter> to open pdf
          and press <ctrl-c> to copy citation to clipboard

          note: 
           # to convert a bib to json, run
           # pandoc bibdFile.bib -t csljson -o bibdFile.json


         depends: 
          fzf
          git grep
          sed tail
          bat or less
          fetch_citation, pandoc, pandoc-citeproc
          zathura (or other fast pdf viewer)
          echo
          wl-copy
          jq

         defaults:
          Set the required default file locations (csl file, bib file)
 
    "
    exit 0
fi

#Setup defaults
cslFile=${2:-$HOME/projects/learn/bibd/bibd-md.csl}
bibdFile=${3:-$HOME/projects/learn/bibd/OMEGA.bib}
# bibdFile=${2:-$HOME/projects/learn/bibd/OMEGA.json}
cd $(dirname $bibdFile)
set -e #exit if an error


view_bib() {
    # Use fzf to search citation
    # Initial scroll offset is set to the line number of each line
    # of git grep output *minus* 5 lines (-5)
    # str=$(cat $fn | fzf)

    # str=$(git grep -E --line-number $sPattern $bibdFile | fzf --delimiter : --preview 'nl {1} --body-numbering=a' --preview-window=:up:70%:+{2}-5)
    # str=$(git grep -E --line-number $sPattern $bibdFile | fzf --delimiter : --preview 'less {1}' --preview-window=:up:70%:+{2}-5)
    str=$(git grep -E --line-number $sPattern $bibdFile | fzf --delimiter : --preview 'bat --color=always --style=numbers --line-range=:500 {1}' --preview-window=:up:70%:+{2}-5)

    # extract citation key from the fzf string
    citeKey=$(echo $str | sed -E "s|$(basename $bibdFile):[0-9]+:@[a-zA-Z]+\{(.+),|\1|")
    fetch_citation citeKey
}


view_json() {
    # export citeKey=$1
    # doiStr=$(jq -r '.[] | select(.id==env.citeKey).DOI' $bibdFile)
    # urlStr=$(jq -r '.[] | select(.id==env.citeKey).URL' $bibdFile)

    #actually this is the good one, opens pdfs quickly
    jq -r '.[] | [.id, .title, .abstract, .keyword, .DOI, .PMID, .author[]?.family, .issued[]?[0]?[0], .["container-title"], .URL] | join("  ")' $bibdFile | fzf --preview 'echo {}' --preview-window=:up:70%:wrap \
    --bind "enter:execute-silent(zathura {-1} &)" \
    --bind "ctrl-c:execute-silent(fetch_citation {1})"

#    --bind "ctrl-c:execute(notify-send {1})"
}


#set pattern to the null character '\0' for search all, else search only cite keys
if [ "$1" == "a" ]; then
    sPattern='\0'
else
    sPattern="@[a-zA-Z_-]+\{"
fi

if [ "$1" == "j" ]; then
    bibdFile=${3:-$HOME/projects/learn/bibd/OMEGA.json}
    view_json
else
    view_bib
fi
